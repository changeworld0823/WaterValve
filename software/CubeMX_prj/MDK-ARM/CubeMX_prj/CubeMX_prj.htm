<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [CubeMX_prj\CubeMX_prj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image CubeMX_prj\CubeMX_prj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Tue Aug 11 13:35:06 2020
<BR><P>
<H3>Maximum Stack Usage =       2048 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
StartDefaultTask &rArr; IOT_MQTT_Construct &rArr; IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[1b6]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15c]">parse_value</a><BR>
 <LI><a href="#[1b2]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15c]">parse_value</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from stm32f1xx_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[53]">IOT_MQTT_Publish_Simple</a> from mqtt_api.o(i.IOT_MQTT_Publish_Simple) referenced from mqtt_api.o(i.IOT_MQTT_Construct)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[60]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[a]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from stm32f1xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from stm32f1xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[50]">UART_DMAError</a> from stm32f1xx_hal_uart.o(i.UART_DMAError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[50]">UART_DMAError</a> from stm32f1xx_hal_uart.o(i.UART_DMAError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[4e]">UART_DMAReceiveCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[4f]">UART_DMARxHalfCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[51]">UART_DMATransmitCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[52]">UART_DMATxHalfCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[30]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[4b]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4a]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[57]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[58]">at_worker</a> from at_parser.o(i.at_worker) referenced from at_parser.o(i.at_parser_init)
 <LI><a href="#[54]">bufchar</a> from mqttpacket.o(i.bufchar) referenced from mqttpacket.o(i.MQTTPacket_decodeBuf)
 <LI><a href="#[55]">event_handle</a> from freertos.o(i.event_handle) referenced from freertos.o(i.StartDefaultTask)
 <LI><a href="#[56]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[5c]">iotx_net_connect</a> from infra_net.o(i.iotx_net_connect) referenced from infra_net.o(i.iotx_net_init)
 <LI><a href="#[5b]">iotx_net_disconnect</a> from infra_net.o(i.iotx_net_disconnect) referenced from infra_net.o(i.iotx_net_init)
 <LI><a href="#[4c]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[47]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5e]">message_arrive</a> from freertos.o(i.message_arrive) referenced from freertos.o(i.subscribe)
 <LI><a href="#[5f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[5d]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[59]">utils_net_read</a> from infra_net.o(i.utils_net_read) referenced from infra_net.o(i.iotx_net_init)
 <LI><a href="#[5a]">utils_net_write</a> from infra_net.o(i.utils_net_write) referenced from infra_net.o(i.iotx_net_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[1e4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[61]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[82]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1dc]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1ea]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1eb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IDLE_Callback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_log
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_service_name
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scan_for_callback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_mgr_upstream_request_assemble
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_update
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_key_array_index
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_recv_buffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_object_item
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_mgr_upstream_request_assemble
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_array_item
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_object_item
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ed]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_log_poll
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_service_name
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scan_for_callback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_strtok
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetFirmwareVersion
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_recv_buffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_object_item
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_json_parse
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_json_object_item
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_permance_info
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_new
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_array_item
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_object_item
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish_Simple
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[1ef]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f7]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msgid
</UL>

<P><STRONG><a name="[a7]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_target_msg
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetFirmwareVersion
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
</UL>

<P><STRONG><a name="[1ab]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_object_item
</UL>

<P><STRONG><a name="[a8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msgid
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tail
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_log_header
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_permance_info
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_service_name
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scan_for_callback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_getaddrinfo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_mgr_upstream_request_assemble
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_strtok
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetFirmwareVersion
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_facility_json_print
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish_Simple
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_rule
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[124]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scan_for_callback
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_strtok
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_object_item
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
</UL>

<P><STRONG><a name="[183]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
</UL>

<P><STRONG><a name="[182]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scan_for_callback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_parse
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
</UL>

<P><STRONG><a name="[76]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[6b]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[6e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_key_array_index
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4a]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[70]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1f2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[62]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1f4]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1f6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[4c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1f7]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1f8]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1f9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>AT_TCP_Destroy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_tcp.o(i.AT_TCP_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AT_TCP_Destroy &rArr; at_conn_close &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_close
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_disconnect
</UL>

<P><STRONG><a name="[87]"></a>AT_TCP_Establish</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, at_tcp.o(i.AT_TCP_Establish))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = AT_TCP_Establish &rArr; at_conn_start &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_setup
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_getaddrinfo
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_close
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_connect
</UL>

<P><STRONG><a name="[8b]"></a>AT_TCP_Read</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, at_tcp.o(i.AT_TCP_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AT_TCP_Read &rArr; at_conn_recv &rArr; free_payload &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_left
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_time_ms
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recvbufempty
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_read
</UL>

<P><STRONG><a name="[91]"></a>AT_TCP_Write</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, at_tcp.o(i.AT_TCP_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AT_TCP_Write &rArr; at_conn_send
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_time_left
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_time_ms
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_send
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_net_write
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[16c]"></a>HAL_AT_CONN_Close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper.o(i.HAL_AT_CONN_Close))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_close
</UL>

<P><STRONG><a name="[16e]"></a>HAL_AT_CONN_DomainToIp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper.o(i.HAL_AT_CONN_DomainToIp))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_getaddrinfo
</UL>

<P><STRONG><a name="[94]"></a>HAL_AT_CONN_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, wrapper.o(i.HAL_AT_CONN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_AT_CONN_Init &rArr; HAL_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTE_SetState
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTE_SetMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SemaphoreDestroy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SemaphoreCreate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_init
</UL>

<P><STRONG><a name="[174]"></a>HAL_AT_CONN_Send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper.o(i.HAL_AT_CONN_Send))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_send
</UL>

<P><STRONG><a name="[176]"></a>HAL_AT_CONN_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper.o(i.HAL_AT_CONN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_start
</UL>

<P><STRONG><a name="[9c]"></a>HAL_AT_Uart_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wrapper.o(i.HAL_AT_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_AT_Uart_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_AT_Uart_Recv</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, wrapper.o(i.HAL_AT_Uart_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_AT_Uart_Recv
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom_lower
</UL>

<P><STRONG><a name="[db]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[e0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_DMA_Init</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a0]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[a2]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTE_SetState
</UL>

<P><STRONG><a name="[a4]"></a>HAL_Free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper.o(i.HAL_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_log_poll
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_atnetbuf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_free
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_deinit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_recv_buffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_recv_buffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[e7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[140]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_GetDeviceName</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wrapper.o(i.HAL_GetDeviceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetDeviceName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
</UL>

<P><STRONG><a name="[a9]"></a>HAL_GetDeviceSecret</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wrapper.o(i.HAL_GetDeviceSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetDeviceSecret &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[aa]"></a>HAL_GetFirmwareVersion</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wrapper.o(i.HAL_GetFirmwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetFirmwareVersion &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GetProductKey</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wrapper.o(i.HAL_GetProductKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetProductKey &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
</UL>

<P><STRONG><a name="[a3]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[d7]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ac]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>HAL_InitTick</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, stm32f1xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_Malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper.o(i.HAL_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_service_name
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_new
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_recv_buffer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[af]"></a>HAL_MspInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_MutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wrapper.o(i.HAL_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_MutexDestroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wrapper.o(i.HAL_MutexDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_MutexDestroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit_uart_recv_mutex
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit_task_mutex
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_deinit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_MutexLock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wrapper.o(i.HAL_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_cm_pub
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_api_lock
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_setup
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_close
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fd_is_valid
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[bc]"></a>HAL_MutexUnlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wrapper.o(i.HAL_MutexUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_MutexUnlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_cm_pub
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_api_unlock
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_setup
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_close
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fd_is_valid
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[b1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_Printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, wrapper.o(i.HAL_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Establish
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Destroy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_new
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_facility_json_print
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b2]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b3]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[14b]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[97]"></a>HAL_SemaphoreCreate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wrapper.o(i.HAL_SemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SemaphoreCreate &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_SemaphoreDestroy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wrapper.o(i.HAL_SemaphoreDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SemaphoreDestroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_SemaphorePost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wrapper.o(i.HAL_SemaphorePost))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SemaphorePost &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
</UL>

<P><STRONG><a name="[8f]"></a>HAL_SleepMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wrapper.o(i.HAL_SleepMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SleepMs &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
</UL>

<P><STRONG><a name="[c6]"></a>HAL_Snprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, wrapper.o(i.HAL_Snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_permance_info
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_service_name
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[b5]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_ThreadCreate</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, wrapper.o(i.HAL_ThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_ThreadCreate &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[da]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IDLE_Callback
</UL>

<P><STRONG><a name="[e1]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[de]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_UART_MspInit</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ea]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IDLE_Callback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_Uart_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[eb]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wrapper.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[148]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[ec]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
</UL>

<P><STRONG><a name="[e3]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wrapper.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[149]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[ed]"></a>HAL_UptimeMs</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wrapper.o(i.HAL_UptimeMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UptimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_permance_info
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_time_ms
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_fetch
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_spend
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>IOT_ATM_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_api.o(i.IOT_ATM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = IOT_ATM_Init &rArr; at_parser_init &rArr; HAL_ThreadCreate &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[f1]"></a>IOT_Ioctl</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, infra_compat.o(i.IOT_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IOT_Ioctl &rArr; iotx_dm_set_opt &rArr; dm_opt_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_dm_set_opt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[f4]"></a>IOT_MQTT_Construct</STRONG> (Thumb, 550 bytes, Stack size 344 bytes, mqtt_api.o(i.IOT_MQTT_Construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = IOT_MQTT_Construct &rArr; IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_event_callback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_set_report_func
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_mid
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[102]"></a>IOT_MQTT_Destroy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mqtt_api.o(i.IOT_MQTT_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IOT_MQTT_Destroy &rArr; wrapper_mqtt_release &rArr; wrapper_mqtt_check_state &rArr; iotx_mc_get_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[103]"></a>IOT_MQTT_Publish</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mqtt_api.o(i.IOT_MQTT_Publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = IOT_MQTT_Publish &rArr; wrapper_mqtt_publish &rArr; MQTTPublish &rArr; iotx_facility_json_print &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish
</UL>

<P><STRONG><a name="[53]"></a>IOT_MQTT_Publish_Simple</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, mqtt_api.o(i.IOT_MQTT_Publish_Simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = IOT_MQTT_Publish_Simple &rArr; wrapper_mqtt_publish &rArr; MQTTPublish &rArr; iotx_facility_json_print &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqtt_api.o(i.IOT_MQTT_Construct)
</UL>
<P><STRONG><a name="[105]"></a>IOT_MQTT_Subscribe</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mqtt_api.o(i.IOT_MQTT_Subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IOT_MQTT_Subscribe &rArr; wrapper_mqtt_subscribe &rArr; MQTTSubscribe &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_offline_subscribe
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe
</UL>

<P><STRONG><a name="[108]"></a>IOT_MQTT_Yield</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqtt_api.o(i.IOT_MQTT_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = IOT_MQTT_Yield &rArr; wrapper_mqtt_yield &rArr; _mqtt_cycle &rArr; iotx_mc_cycle &rArr; iotx_mc_handle_recv_PUBLISH &rArr; get_msgid &rArr; send_permance_info &rArr; iotx_dm_log_post &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[f5]"></a>IOT_Sign_MQTT</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, dev_sign_mqtt.o(i.IOT_Sign_MQTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sign_get_clientid
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[99]"></a>LTE_SetMode</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wh_lte.o(i.LTE_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LTE_SetMode &rArr; Uart_SendData &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Init
</UL>

<P><STRONG><a name="[98]"></a>LTE_SetState</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wh_lte.o(i.LTE_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LTE_SetState &rArr; Uart_SendData &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SendData
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Init
</UL>

<P><STRONG><a name="[10c]"></a>MQTTConnect</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.MQTTConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTTConnect &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
</UL>

<P><STRONG><a name="[115]"></a>MQTTDeserialize_ack</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
</UL>

<P><STRONG><a name="[119]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_CONNACK
</UL>

<P><STRONG><a name="[11a]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[11c]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, mqttsubscribeclient.o(i.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
</UL>

<P><STRONG><a name="[11d]"></a>MQTTDeserialize_unsuback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mqttunsubscribeclient.o(i.MQTTDeserialize_unsuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MQTTDeserialize_unsuback &rArr; MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[122]"></a>MQTTPacket_decode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[117]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[132]"></a>MQTTPacket_encode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
</UL>

<P><STRONG><a name="[123]"></a>MQTTPacket_equals</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTPacket_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MQTTPacket_equals &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
</UL>

<P><STRONG><a name="[10e]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[12c]"></a>MQTTPublish</STRONG> (Thumb, 314 bytes, Stack size 64 bytes, iotx_mqtt_client.o(i.MQTTPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = MQTTPublish &rArr; iotx_facility_json_print &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_facility_json_print
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlist_del
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
</UL>

<P><STRONG><a name="[12b]"></a>MQTTSerialize_ack</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mqttserializepublish.o(i.MQTTSerialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_ack &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
</UL>

<P><STRONG><a name="[110]"></a>MQTTSerialize_connect</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[10d]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[11f]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqttconnectclient.o(i.MQTTSerialize_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[121]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqttconnectclient.o(i.MQTTSerialize_pingreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
</UL>

<P><STRONG><a name="[12d]"></a>MQTTSerialize_publish</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_publish &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[138]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[139]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[13a]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[137]"></a>MQTTSerialize_zero</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>

<P><STRONG><a name="[136]"></a>MQTTstrlen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[13d]"></a>MX_DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>MX_GPIO_Init</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>MX_TIM3_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>StartDefaultTask</STRONG> (Thumb, 210 bytes, Stack size 656 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = StartDefaultTask &rArr; IOT_MQTT_Construct &rArr; IOT_Sign_MQTT &rArr; _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_ATM_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceSecret
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;publish
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>SystemClock_Config</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[cb]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[14a]"></a>UART_IDLE_Callback</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usart.o(i.UART_IDLE_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_IDLE_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART1_IRQHandler &rArr; UART_IDLE_Callback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IDLE_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>Uart_SendData</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart.o(i.Uart_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Uart_SendData &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTE_SetState
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTE_SetMode
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1fb]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[1fc]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[1fd]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[bf]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>

<P><STRONG><a name="[14e]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1fe]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1ff]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[200]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[c7]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[201]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[202]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[203]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[204]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[10a]"></a>_iotx_generate_sign_string</STRONG> (Thumb, 330 bytes, Stack size 320 bytes, dev_sign_mqtt.o(i._iotx_generate_sign_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = _iotx_generate_sign_string &rArr; utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
</UL>

<P><STRONG><a name="[6c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[15f]"></a>_mqtt_cycle</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i._mqtt_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = _mqtt_cycle &rArr; iotx_mc_cycle &rArr; iotx_mc_handle_recv_PUBLISH &rArr; get_msgid &rArr; send_permance_info &rArr; iotx_dm_log_post &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
</UL>

<P><STRONG><a name="[f8]"></a>_sign_get_clientid</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, dev_sign_mqtt.o(i._sign_get_clientid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _sign_get_clientid
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Sign_MQTT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[168]"></a>add_log_header</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_log_report.o(i.add_log_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_log_header &rArr; push_log
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_log
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_log_poll
</UL>

<P><STRONG><a name="[16a]"></a>add_tail</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dm_log_report.o(i.add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_tail &rArr; push_log
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_log
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
</UL>

<P><STRONG><a name="[85]"></a>at_conn_close</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, at_conn_mgmt.o(i.at_conn_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = at_conn_close &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Close
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conn
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeconn
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Establish
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Destroy
</UL>

<P><STRONG><a name="[88]"></a>at_conn_getaddrinfo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_conn_mgmt.o(i.at_conn_getaddrinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at_conn_getaddrinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_DomainToIp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Establish
</UL>

<P><STRONG><a name="[f0]"></a>at_conn_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, at_conn_mgmt.o(i.at_conn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = at_conn_init &rArr; HAL_AT_CONN_Init &rArr; HAL_MutexCreate &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_ATM_Init
</UL>

<P><STRONG><a name="[90]"></a>at_conn_recv</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, at_conn_mgmt.o(i.at_conn_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = at_conn_recv &rArr; free_payload &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conn
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_atnetbuf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_valid
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_fetch
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Read
</UL>

<P><STRONG><a name="[8e]"></a>at_conn_recvbufempty</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at_conn_mgmt.o(i.at_conn_recvbufempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_conn_recvbufempty &rArr; at_mbox_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conn
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_valid
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Read
</UL>

<P><STRONG><a name="[92]"></a>at_conn_send</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, at_conn_mgmt.o(i.at_conn_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_conn_send
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Send
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conn
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Write
</UL>

<P><STRONG><a name="[89]"></a>at_conn_setup</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, at_conn_mgmt.o(i.at_conn_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = at_conn_setup &rArr; at_newconn &rArr; at_mbox_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conn
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_newconn
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Establish
</UL>

<P><STRONG><a name="[8a]"></a>at_conn_start</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, at_conn_mgmt.o(i.at_conn_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = at_conn_start &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_CONN_Start
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_conn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Establish
</UL>

<P><STRONG><a name="[173]"></a>at_mbox_empty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_conn_mbox.o(i.at_mbox_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_mbox_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ringbuf_available_read_space
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recvbufempty
</UL>

<P><STRONG><a name="[170]"></a>at_mbox_fetch</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, at_conn_mbox.o(i.at_mbox_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at_mbox_fetch &rArr; at_ringbuf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ringbuf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recv
</UL>

<P><STRONG><a name="[17a]"></a>at_mbox_free</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at_conn_mbox.o(i.at_mbox_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_mbox_free &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeconn
</UL>

<P><STRONG><a name="[180]"></a>at_mbox_new</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, at_conn_mbox.o(i.at_mbox_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_mbox_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_newconn
</UL>

<P><STRONG><a name="[17b]"></a>at_mbox_set_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_conn_mbox.o(i.at_mbox_set_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeconn
</UL>

<P><STRONG><a name="[179]"></a>at_mbox_tryfetch</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at_conn_mbox.o(i.at_mbox_tryfetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_mbox_tryfetch &rArr; at_ringbuf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ringbuf_read
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeconn
</UL>

<P><STRONG><a name="[16f]"></a>at_mbox_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_conn_mbox.o(i.at_mbox_valid))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recvbufempty
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeconn
</UL>

<P><STRONG><a name="[ef]"></a>at_parser_init</STRONG> (Thumb, 294 bytes, Stack size 72 bytes, at_parser.o(i.at_parser_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = at_parser_init &rArr; HAL_ThreadCreate &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ThreadCreate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_Uart_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit_uart_recv_mutex
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_deinit_task_mutex
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_ATM_Init
</UL>

<P><STRONG><a name="[54]"></a>bufchar</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mqttpacket.o(i.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(i.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[184]"></a>dm_client_publish</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, dm_client_adapter.o(i.dm_client_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dm_client_publish &rArr; iotx_cm_pub &rArr; _fd_is_valid &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_cm_pub
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
</UL>

<P><STRONG><a name="[186]"></a>dm_mgr_upstream_thing_log_post</STRONG> (Thumb, 148 bytes, Stack size 128 bytes, dm_manager.o(i.dm_mgr_upstream_thing_log_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_log_poll
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_log
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tail
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_id
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_mgr_upstream_request_assemble
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sample
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_dm_log_post
</UL>

<P><STRONG><a name="[189]"></a>dm_msg_request</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, dm_message.o(i.dm_msg_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_client_publish
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_service_name
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_parse
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
</UL>

<P><STRONG><a name="[196]"></a>dm_opt_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dm_opt.o(i.dm_opt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm_opt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_dm_set_opt
</UL>

<P><STRONG><a name="[18c]"></a>dm_utils_json_object_item</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dm_utils.o(i.dm_utils_json_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = dm_utils_json_object_item &rArr; lite_cjson_object_item &rArr; _lite_cjson_object_item &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_object_item
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg_id
</UL>

<P><STRONG><a name="[18e]"></a>dm_utils_json_parse</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dm_utils.o(i.dm_utils_json_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dm_utils_json_parse &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_parse
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg_id
</UL>

<P><STRONG><a name="[18a]"></a>dm_utils_service_name</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, dm_utils.o(i.dm_utils_service_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dm_utils_service_name &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
</UL>

<P><STRONG><a name="[55]"></a>event_handle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.event_handle))
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.StartDefaultTask)
</UL>
<P><STRONG><a name="[56]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[18f]"></a>get_msgid</STRONG> (Thumb, 132 bytes, Stack size 144 bytes, dm_log_report.o(i.get_msgid))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = get_msgid &rArr; send_permance_info &rArr; iotx_dm_log_post &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sample
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_target_msg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg_id
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_permance_info
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[194]"></a>infra_strtok</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, infra_string.o(i.infra_strtok))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = infra_strtok &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
</UL>

<P><STRONG><a name="[185]"></a>iotx_cm_pub</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, iotx_cm.o(i.iotx_cm_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = iotx_cm_pub &rArr; _fd_is_valid &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fd_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_client_publish
</UL>

<P><STRONG><a name="[195]"></a>iotx_dm_log_post</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dm_api.o(i.iotx_dm_log_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = iotx_dm_log_post &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_api_unlock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_api_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_permance_info
</UL>

<P><STRONG><a name="[f3]"></a>iotx_dm_set_opt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dm_api.o(i.iotx_dm_set_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iotx_dm_set_opt &rArr; dm_opt_set
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_opt_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Ioctl
</UL>

<P><STRONG><a name="[101]"></a>iotx_event_callback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, infra_compat.o(i.iotx_event_callback))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[130]"></a>iotx_facility_json_print</STRONG> (Thumb, 558 bytes, Stack size 96 bytes, infra_prt_nwk_payload.o(i.iotx_facility_json_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = iotx_facility_json_print &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_parse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_is_object
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[5c]"></a>iotx_net_connect</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, infra_net.o(i.iotx_net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = iotx_net_connect &rArr; AT_TCP_Establish &rArr; at_conn_start &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Establish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infra_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[5b]"></a>iotx_net_disconnect</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, infra_net.o(i.iotx_net_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iotx_net_disconnect &rArr; AT_TCP_Destroy &rArr; at_conn_close &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infra_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[1a6]"></a>iotx_net_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, infra_net.o(i.iotx_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotx_net_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[ff]"></a>iotx_report_devinfo</STRONG> (Thumb, 170 bytes, Stack size 224 bytes, infra_report.o(i.iotx_report_devinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = iotx_report_devinfo &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_id
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[100]"></a>iotx_report_firmware_version</STRONG> (Thumb, 156 bytes, Stack size 352 bytes, infra_report.o(i.iotx_report_firmware_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = iotx_report_firmware_version &rArr; HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_id
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetFirmwareVersion
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[187]"></a>iotx_report_id</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, infra_report.o(i.iotx_report_id))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_firmware_version
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_report_devinfo
</UL>

<P><STRONG><a name="[fe]"></a>iotx_report_mid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, infra_report.o(i.iotx_report_mid))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[fd]"></a>iotx_set_report_func</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, infra_report.o(i.iotx_set_report_func))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[112]"></a>iotx_time_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, infra_timer.o(i.iotx_time_init))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[161]"></a>iotx_time_left</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, infra_timer.o(i.iotx_time_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
</UL>

<P><STRONG><a name="[128]"></a>iotx_time_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, infra_timer.o(i.iotx_time_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotx_time_start &rArr; HAL_UptimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_push_pubInfo_to
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[1aa]"></a>lite_cjson_array_item</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, infra_cjson.o(i.lite_cjson_array_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lite_cjson_array_item &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_object_item
</UL>

<P><STRONG><a name="[197]"></a>lite_cjson_is_object</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, infra_cjson.o(i.lite_cjson_is_object))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_facility_json_print
</UL>

<P><STRONG><a name="[18d]"></a>lite_cjson_object_item</STRONG> (Thumb, 246 bytes, Stack size 184 bytes, infra_cjson.o(i.lite_cjson_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lite_cjson_object_item &rArr; _lite_cjson_object_item &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_array_item
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_object_item
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_key_array_index
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_json_object_item
</UL>

<P><STRONG><a name="[18b]"></a>lite_cjson_parse</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, infra_cjson.o(i.lite_cjson_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_json_parse
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_msg_request
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_facility_json_print
</UL>

<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5e]"></a>message_arrive</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.message_arrive))
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(i.subscribe)
</UL>
<P><STRONG><a name="[c5]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
</UL>

<P><STRONG><a name="[1ac]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>osThreadCreate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ThreadCreate
</UL>

<P><STRONG><a name="[190]"></a>parse_msg_id</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, dm_log_report.o(i.parse_msg_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = parse_msg_id &rArr; dm_utils_json_object_item &rArr; lite_cjson_object_item &rArr; _lite_cjson_object_item &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_json_parse
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_utils_json_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msgid
</UL>

<P><STRONG><a name="[145]"></a>publish</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, freertos.o(i.publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = publish &rArr; IOT_MQTT_Publish &rArr; wrapper_mqtt_publish &rArr; MQTTPublish &rArr; iotx_facility_json_print &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[169]"></a>push_log</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dm_log_report.o(i.push_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = push_log
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tail
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_log_header
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
</UL>

<P><STRONG><a name="[b7]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1e1]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1c7]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[116]"></a>readChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.readChar))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[118]"></a>readInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mqttpacket.o(i.readInt))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[11b]"></a>readMQTTLenString</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mqttpacket.o(i.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = readMQTTLenString
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[1d0]"></a>remove_log_poll</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_log_report.o(i.remove_log_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = remove_log_poll &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_sample
</UL>

<P><STRONG><a name="[188]"></a>reset_log_poll</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dm_log_report.o(i.reset_log_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = reset_log_poll &rArr; add_log_header &rArr; push_log
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_log_header
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
</UL>

<P><STRONG><a name="[193]"></a>send_permance_info</STRONG> (Thumb, 156 bytes, Stack size 192 bytes, dm_log_report.o(i.send_permance_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = send_permance_info &rArr; iotx_dm_log_post &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_dm_log_post
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msgid
</UL>

<P><STRONG><a name="[192]"></a>set_target_msg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dm_log_report.o(i.set_target_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_target_msg &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msgid
</UL>

<P><STRONG><a name="[191]"></a>stop_sample</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dm_log_report.o(i.stop_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = stop_sample &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_log_poll
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msgid
</UL>

<P><STRONG><a name="[1b4]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[144]"></a>subscribe</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, freertos.o(i.subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = subscribe &rArr; IOT_MQTT_Subscribe &rArr; wrapper_mqtt_subscribe &rArr; MQTTSubscribe &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetProductKey
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDeviceName
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[157]"></a>utils_hmac_sha256</STRONG> (Thumb, 180 bytes, Stack size 264 bytes, infra_sha256.o(i.utils_hmac_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = utils_hmac_sha256 &rArr; utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_update
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_starts
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_finish
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iotx_generate_sign_string
</UL>

<P><STRONG><a name="[59]"></a>utils_net_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, infra_net.o(i.utils_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = utils_net_read &rArr; AT_TCP_Read &rArr; at_conn_recv &rArr; free_payload &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infra_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[5a]"></a>utils_net_write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, infra_net.o(i.utils_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = utils_net_write &rArr; AT_TCP_Write &rArr; at_conn_send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> infra_net.o(i.iotx_net_init)
</UL>
<P><STRONG><a name="[1d4]"></a>utils_sha256_finish</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, infra_sha256.o(i.utils_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = utils_sha256_finish &rArr; utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
</UL>

<P><STRONG><a name="[1d1]"></a>utils_sha256_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, infra_sha256.o(i.utils_sha256_init))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
</UL>

<P><STRONG><a name="[1d5]"></a>utils_sha256_process</STRONG> (Thumb, 288 bytes, Stack size 320 bytes, infra_sha256.o(i.utils_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = utils_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_update
</UL>

<P><STRONG><a name="[1d2]"></a>utils_sha256_starts</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, infra_sha256.o(i.utils_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
</UL>

<P><STRONG><a name="[1d3]"></a>utils_sha256_update</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, infra_sha256.o(i.utils_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = utils_sha256_update &rArr; utils_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_sha256_finish
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_hmac_sha256
</UL>

<P><STRONG><a name="[113]"></a>utils_time_countdown_ms</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, infra_timer.o(i.utils_time_countdown_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = utils_time_countdown_ms &rArr; HAL_UptimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[162]"></a>utils_time_is_expired</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, infra_timer.o(i.utils_time_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utils_time_is_expired &rArr; HAL_UptimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
</UL>

<P><STRONG><a name="[127]"></a>utils_time_spend</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, infra_timer.o(i.utils_time_spend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utils_time_spend &rArr; HAL_UptimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[1b8]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1d9]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1bd]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1c6]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1ba]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1b9]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1bc]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1be]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[a5]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1db]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b9]"></a>vQueueDelete</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SemaphoreDestroy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
</UL>

<P><STRONG><a name="[1d6]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[1ad]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1df]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1cb]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1d7]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1d8]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1ae]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1cc]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[63]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1a9]"></a>wrapper_mqtt_check_state</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_check_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wrapper_mqtt_check_state &rArr; iotx_mc_get_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
</UL>

<P><STRONG><a name="[fa]"></a>wrapper_mqtt_connect</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
</UL>

<P><STRONG><a name="[f9]"></a>wrapper_mqtt_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wrapper_mqtt_init &rArr; iotx_mc_init &rArr; iotx_mc_set_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[104]"></a>wrapper_mqtt_publish</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wrapper_mqtt_publish &rArr; MQTTPublish &rArr; iotx_facility_json_print &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Publish_Simple
</UL>

<P><STRONG><a name="[fb]"></a>wrapper_mqtt_release</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wrapper_mqtt_release &rArr; wrapper_mqtt_check_state &rArr; iotx_mc_get_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Destroy
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[106]"></a>wrapper_mqtt_subscribe</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wrapper_mqtt_subscribe &rArr; MQTTSubscribe &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_next_packetid
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
</UL>

<P><STRONG><a name="[109]"></a>wrapper_mqtt_yield</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.wrapper_mqtt_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = wrapper_mqtt_yield &rArr; _mqtt_cycle &rArr; iotx_mc_cycle &rArr; iotx_mc_handle_recv_PUBLISH &rArr; get_msgid &rArr; send_permance_info &rArr; iotx_dm_log_post &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Yield
</UL>

<P><STRONG><a name="[134]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[131]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[133]"></a>writeInt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
</UL>

<P><STRONG><a name="[135]"></a>writeMQTTString</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[1da]"></a>xPortStartScheduler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[c3]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SemaphoreCreate
</UL>

<P><STRONG><a name="[b8]"></a>xQueueCreateMutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
</UL>

<P><STRONG><a name="[1dd]"></a>xQueueGenericCreate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[1c4]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[bd]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SemaphorePost
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[bb]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>

<P><STRONG><a name="[1e0]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b1]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1b0]"></a>xTaskCreateStatic</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1de]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[9f]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_Uart_Recv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>

<P><STRONG><a name="[146]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c0]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1e2]"></a>xTaskPriorityInherit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1ca]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1cf]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a1]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[be]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ce]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[cc]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[cd]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4d]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[50]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[4e]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[4f]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[51]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[52]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[dd]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[dc]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[df]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>UART_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e2]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>at_ringbuf_available_read_space</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, at_conn_mbox.o(i.at_ringbuf_available_read_space))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_empty
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ringbuf_read
</UL>

<P><STRONG><a name="[17f]"></a>at_ringbuf_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, at_conn_mbox.o(i.at_ringbuf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at_ringbuf_read
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ringbuf_available_read_space
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_tryfetch
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_fetch
</UL>

<P><STRONG><a name="[16d]"></a>at_freeconn</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, at_conn_mgmt.o(i.at_freeconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_freeconn &rArr; free_payload &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_payload
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_atnetbuf
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_valid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_tryfetch
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_set_invalid
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_free
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_close
</UL>

<P><STRONG><a name="[175]"></a>at_newconn</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, at_conn_mgmt.o(i.at_newconn))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = at_newconn &rArr; at_mbox_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_setup
</UL>

<P><STRONG><a name="[172]"></a>free_atnetbuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_conn_mgmt.o(i.free_atnetbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = free_atnetbuf &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeconn
</UL>

<P><STRONG><a name="[171]"></a>free_payload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_conn_mgmt.o(i.free_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = free_payload &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_freeconn
</UL>

<P><STRONG><a name="[16b]"></a>get_conn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at_conn_mgmt.o(i.get_conn))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_setup
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_send
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recvbufempty
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_recv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_conn_close
</UL>

<P><STRONG><a name="[177]"></a>at_deinit_task_mutex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_parser.o(i.at_deinit_task_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_deinit_task_mutex &rArr; HAL_MutexDestroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[178]"></a>at_deinit_uart_recv_mutex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_parser.o(i.at_deinit_uart_recv_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_deinit_uart_recv_mutex &rArr; HAL_MutexDestroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser_init
</UL>

<P><STRONG><a name="[17c]"></a>at_getc</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, at_parser.o(i.at_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = at_getc &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recvfrom_lower
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
</UL>

<P><STRONG><a name="[17d]"></a>at_recvfrom_lower</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, at_parser.o(i.at_recvfrom_lower))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_recvfrom_lower &rArr; HAL_AT_Uart_Recv
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_AT_Uart_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getc
</UL>

<P><STRONG><a name="[181]"></a>at_scan_for_callback</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, at_parser.o(i.at_scan_for_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = at_scan_for_callback &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_worker
</UL>

<P><STRONG><a name="[58]"></a>at_worker</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, at_parser.o(i.at_worker))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = at_worker &rArr; at_getc &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SemaphorePost
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_scan_for_callback
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_parser.o(i.at_parser_init)
</UL>
<P><STRONG><a name="[8c]"></a>_get_time_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_tcp.o(i._get_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_time_ms &rArr; HAL_UptimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UptimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Read
</UL>

<P><STRONG><a name="[8d]"></a>_time_left</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at_tcp.o(i._time_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _time_left
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TCP_Read
</UL>

<P><STRONG><a name="[150]"></a>_dm_api_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dm_api.o(i._dm_api_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _dm_api_lock &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_dm_log_post
</UL>

<P><STRONG><a name="[151]"></a>_dm_api_unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dm_api.o(i._dm_api_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _dm_api_unlock &rArr; HAL_MutexUnlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_dm_log_post
</UL>

<P><STRONG><a name="[153]"></a>_dm_mgr_search_dev_by_devid</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dm_manager.o(i._dm_mgr_search_dev_by_devid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _dm_mgr_search_dev_by_devid
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_mgr_upstream_request_assemble
</UL>

<P><STRONG><a name="[152]"></a>_dm_mgr_upstream_request_assemble</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, dm_manager.o(i._dm_mgr_upstream_request_assemble))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _dm_mgr_upstream_request_assemble &rArr; _dm_mgr_search_dev_by_devid
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dm_mgr_search_dev_by_devid
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_mgr_upstream_thing_log_post
</UL>

<P><STRONG><a name="[154]"></a>_fd_is_valid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iotx_cm.o(i._fd_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _fd_is_valid &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_cm_pub
</UL>

<P><STRONG><a name="[158]"></a>_lite_cjson_key_array_index</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, infra_cjson.o(i._lite_cjson_key_array_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _lite_cjson_key_array_index &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_object_item
</UL>

<P><STRONG><a name="[159]"></a>_lite_cjson_object_item</STRONG> (Thumb, 266 bytes, Stack size 104 bytes, infra_cjson.o(i._lite_cjson_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _lite_cjson_object_item &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_object_item
</UL>

<P><STRONG><a name="[15a]"></a>buffer_skip_whitespace</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, infra_cjson.o(i.buffer_skip_whitespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_parse
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_array_item
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_object_item
</UL>

<P><STRONG><a name="[1b2]"></a>parse_array</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, infra_cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[1b3]"></a>parse_number</STRONG> (Thumb, 246 bytes, Stack size 96 bytes, infra_cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[1b6]"></a>parse_object</STRONG> (Thumb, 250 bytes, Stack size 88 bytes, infra_cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[15b]"></a>parse_string</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, infra_cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_string
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_object_item
</UL>

<P><STRONG><a name="[15c]"></a>parse_value</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, infra_cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_parse
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_cjson_array_item
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_cjson_object_item
</UL>

<P><STRONG><a name="[11e]"></a>MQTTDisconnect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.MQTTDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTTDisconnect &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
</UL>

<P><STRONG><a name="[120]"></a>MQTTKeepalive</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.MQTTKeepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MQTTKeepalive &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
</UL>

<P><STRONG><a name="[125]"></a>MQTTPubInfoProc</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.MQTTPubInfoProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MQTTPubInfoProc &rArr; iotx_mc_set_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_spend
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
</UL>

<P><STRONG><a name="[12a]"></a>MQTTPuback</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.MQTTPuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MQTTPuback &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[13b]"></a>MQTTSubscribe</STRONG> (Thumb, 406 bytes, Stack size 80 bytes, iotx_mqtt_client.o(i.MQTTSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MQTTSubscribe &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_send_packet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_handle_is_identical
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_send_buffer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_send_buffer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
</UL>

<P><STRONG><a name="[14f]"></a>_alloc_recv_buffer</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i._alloc_recv_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _alloc_recv_buffer &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
</UL>

<P><STRONG><a name="[10f]"></a>_alloc_send_buffer</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i._alloc_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _alloc_send_buffer &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[19e]"></a>_handle_event</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i._handle_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _handle_event
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[15d]"></a>_mqtt_connect</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i._mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
</UL>

<P><STRONG><a name="[167]"></a>_reset_recv_buffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotx_mqtt_client.o(i._reset_recv_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _reset_recv_buffer &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[111]"></a>_reset_send_buffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotx_mqtt_client.o(i._reset_send_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _reset_send_buffer &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[12f]"></a>dlist_del</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iotx_mqtt_client.o(i.dlist_del))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[13c]"></a>iotx_mc_check_handle_is_identical</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_check_handle_is_identical))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = iotx_mc_check_handle_is_identical &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[198]"></a>iotx_mc_check_rule</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_check_rule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iotx_mc_check_rule
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_topic
</UL>

<P><STRONG><a name="[199]"></a>iotx_mc_check_topic</STRONG> (Thumb, 118 bytes, Stack size 152 bytes, iotx_mqtt_client.o(i.iotx_mc_check_topic))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = iotx_mc_check_topic &rArr; infra_strtok &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infra_strtok
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_check_rule
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
</UL>

<P><STRONG><a name="[160]"></a>iotx_mc_cycle</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i.iotx_mc_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = iotx_mc_cycle &rArr; iotx_mc_handle_recv_PUBLISH &rArr; get_msgid &rArr; send_permance_info &rArr; iotx_dm_log_post &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_SUBACK
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBACK
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_recv_buffer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_cycle
</UL>

<P><STRONG><a name="[19f]"></a>iotx_mc_deliver_message</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i.iotx_mc_deliver_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iotx_mc_deliver_message &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_is_topic_matched
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_PUBLISH
</UL>

<P><STRONG><a name="[126]"></a>iotx_mc_get_client_state</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_get_client_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = iotx_mc_get_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[1a1]"></a>iotx_mc_get_next_packetid</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_get_next_packetid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = iotx_mc_get_next_packetid &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
</UL>

<P><STRONG><a name="[1a2]"></a>iotx_mc_handle_reconnect</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = iotx_mc_handle_reconnect &rArr; wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[1a3]"></a>iotx_mc_handle_recv_CONNACK</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_CONNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = iotx_mc_handle_recv_CONNACK &rArr; MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
</UL>

<P><STRONG><a name="[19b]"></a>iotx_mc_handle_recv_PUBACK</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_PUBACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iotx_mc_handle_recv_PUBACK &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[19d]"></a>iotx_mc_handle_recv_PUBLISH</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_PUBLISH))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = iotx_mc_handle_recv_PUBLISH &rArr; get_msgid &rArr; send_permance_info &rArr; iotx_dm_log_post &rArr; dm_mgr_upstream_thing_log_post &rArr; dm_msg_request &rArr; lite_cjson_parse &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msgid
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_facility_json_print
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[19c]"></a>iotx_mc_handle_recv_SUBACK</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, iotx_mqtt_client.o(i.iotx_mc_handle_recv_SUBACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = iotx_mc_handle_recv_SUBACK &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[1a4]"></a>iotx_mc_init</STRONG> (Thumb, 382 bytes, Stack size 112 bytes, iotx_mqtt_client.o(i.iotx_mc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = iotx_mc_init &rArr; iotx_mc_set_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_net_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_connect_params
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_init
</UL>

<P><STRONG><a name="[1a0]"></a>iotx_mc_is_topic_matched</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, iotx_mqtt_client.o(i.iotx_mc_is_topic_matched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iotx_mc_is_topic_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_deliver_message
</UL>

<P><STRONG><a name="[1a7]"></a>iotx_mc_keepalive</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = iotx_mc_keepalive &rArr; iotx_mc_handle_reconnect &rArr; wrapper_mqtt_connect &rArr; _mqtt_connect &rArr; iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_get_client_state
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_yield
</UL>

<P><STRONG><a name="[1a8]"></a>iotx_mc_keepalive_sub</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_keepalive_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iotx_mc_keepalive_sub &rArr; wrapper_mqtt_check_state &rArr; iotx_mc_get_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_check_state
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_set_client_state
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
</UL>

<P><STRONG><a name="[12e]"></a>iotx_mc_push_pubInfo_to</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.iotx_mc_push_pubInfo_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = iotx_mc_push_pubInfo_to &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_start
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[19a]"></a>iotx_mc_read_packet</STRONG> (Thumb, 502 bytes, Stack size 64 bytes, iotx_mqtt_client.o(i.iotx_mc_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_event
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_recv_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_wait_CONNACK
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
</UL>

<P><STRONG><a name="[114]"></a>iotx_mc_send_packet</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, iotx_mqtt_client.o(i.iotx_mc_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iotx_mc_send_packet &rArr; iotx_time_left &rArr; utils_time_is_expired &rArr; HAL_UptimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_left
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_is_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPuback
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTKeepalive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[129]"></a>iotx_mc_set_client_state</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iotx_mqtt_client.o(i.iotx_mc_set_client_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = iotx_mc_set_client_state &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_release
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_publish
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive_sub
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_keepalive
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_reconnect
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_cycle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPubInfoProc
</UL>

<P><STRONG><a name="[1a5]"></a>iotx_mc_set_connect_params</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, iotx_mqtt_client.o(i.iotx_mc_set_connect_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iotx_mc_set_connect_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_init
</UL>

<P><STRONG><a name="[15e]"></a>iotx_mc_wait_CONNACK</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, iotx_mqtt_client.o(i.iotx_mc_wait_CONNACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = iotx_mc_wait_CONNACK &rArr; iotx_mc_read_packet &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_time_countdown_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_time_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_read_packet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mc_handle_recv_CONNACK
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_recv_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mqtt_connect
</UL>

<P><STRONG><a name="[163]"></a>_offline_subs_list_deinit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mqtt_api.o(i._offline_subs_list_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _offline_subs_list_deinit &rArr; HAL_MutexDestroy &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotx_mqtt_deal_offline_subs
</UL>

<P><STRONG><a name="[fc]"></a>iotx_mqtt_deal_offline_subs</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mqtt_api.o(i.iotx_mqtt_deal_offline_subs))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = iotx_mqtt_deal_offline_subs &rArr; wrapper_mqtt_subscribe &rArr; MQTTSubscribe &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_offline_subs_list_deinit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapper_mqtt_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Construct
</UL>

<P><STRONG><a name="[107]"></a>iotx_mqtt_offline_subscribe</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, mqtt_api.o(i.iotx_mqtt_offline_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = iotx_mqtt_offline_subscribe &rArr; HAL_MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_Subscribe
</UL>

<P><STRONG><a name="[1bf]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c2]"></a>prvInitialiseMutex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1c3]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1c8]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1c9]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b7]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1bb]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1c1]"></a>prvDeleteTCB</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[5f]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1c5]"></a>prvInitialiseNewTask</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1e3]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1af]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1cd]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1ce]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[5d]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[155]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
</UL>

<P><STRONG><a name="[165]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[164]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[57]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[67]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[75]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
